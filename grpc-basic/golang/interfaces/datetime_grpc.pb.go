// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package interfaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DateTimeClient is the client API for DateTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DateTimeClient interface {
	GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error)
	GetDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateReply, error)
}

type dateTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewDateTimeClient(cc grpc.ClientConnInterface) DateTimeClient {
	return &dateTimeClient{cc}
}

func (c *dateTimeClient) GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := c.cc.Invoke(ctx, "/datetime.DateTime/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateTimeClient) GetDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateReply, error) {
	out := new(DateReply)
	err := c.cc.Invoke(ctx, "/datetime.DateTime/GetDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DateTimeServer is the server API for DateTime service.
// All implementations must embed UnimplementedDateTimeServer
// for forward compatibility
type DateTimeServer interface {
	GetTime(context.Context, *TimeRequest) (*TimeReply, error)
	GetDate(context.Context, *DateRequest) (*DateReply, error)
	mustEmbedUnimplementedDateTimeServer()
}

// UnimplementedDateTimeServer must be embedded to have forward compatible implementations.
type UnimplementedDateTimeServer struct {
}

func (UnimplementedDateTimeServer) GetTime(context.Context, *TimeRequest) (*TimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedDateTimeServer) GetDate(context.Context, *DateRequest) (*DateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedDateTimeServer) mustEmbedUnimplementedDateTimeServer() {}

// UnsafeDateTimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DateTimeServer will
// result in compilation errors.
type UnsafeDateTimeServer interface {
	mustEmbedUnimplementedDateTimeServer()
}

func RegisterDateTimeServer(s grpc.ServiceRegistrar, srv DateTimeServer) {
	s.RegisterService(&DateTime_ServiceDesc, srv)
}

func _DateTime_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datetime.DateTime/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServer).GetTime(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateTime_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateTimeServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datetime.DateTime/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateTimeServer).GetDate(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DateTime_ServiceDesc is the grpc.ServiceDesc for DateTime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DateTime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datetime.DateTime",
	HandlerType: (*DateTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _DateTime_GetTime_Handler,
		},
		{
			MethodName: "GetDate",
			Handler:    _DateTime_GetDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interfaces/datetime.proto",
}
